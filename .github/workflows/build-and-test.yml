name: Build and Test

on:
  push:

jobs:
  labels:
    if: ${{ github.event.pull_request.merged }}
    name: Validate labels
    runs-on: ubuntu-latest
    outputs:
      versionType: ${{ steps.labels.outputs.versionType }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for "release" labels
        uses: actions/github-script@v7
        id: labels
        with:
          script: |
            const labels = context.payload.pull_request.labels.map((label) => label.name);

            let versionType = 'patch';
            
            if (labels.includes('patch')) {
              versionType = 'patch';
            } else if (labels.includes('minor')) {
              versionType = 'minor';
            } else if (labels.includes('major')) {
              versionType = 'major';
            }
            
            core.setOutput('versionType', versionType);

  version:
    name: Setup package version
    needs: labels
    runs-on: ubuntu-latest
    outputs:
      version: ${{ output.version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.11.0"

      - name: Install semver package
        run: npm install semver --no-save

      - name: Determine new version
        id: version
        run: |
          OLD_VERSION=$(jq -r '.version' package.json)
          NEW_VERSION=$(node -e "console.log(require('semver').inc('$OLD_VERSION', '${{ needs.labels.outputs.versionType }}'))")
          echo "version=$NEW_VERSION" >> "$GITHUB_OUTPUT"

  package:
    name: Update Package Version
    needs: version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update Root Package.json
        run: |
          jq ".version = \"${{ needs.version.outputs.version }}\"" package.json > temp.json && mv temp.json package.json

      - name: Update FrontEnd Package.json
        run: |
          jq ".version = \"${{ needs.version.outputs.version }}\"" mockly-frontend/package.json > mockly-frontend/temp.json && mv mockly-frontend/temp.json mockly-frontend/package.json

      - name: Update BackEnd Package.json
        run: |
          jq ".version = \"${{ needs.version.outputs.version }}\"" mockly-backend/package.json > mockly-backend/temp.json && mv mockly-backend/temp.json mockly-backend/package.json

      - name: Update PackageLock.json with New Version
        run: |
          npm install --prefix mockly-frontend
          npm install --prefix mockly-backend

      - name: Commit and Push New Version
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json
          git add mockly-backend/package.json
          git add mockly-backend/package-lock.json
          git add mockly-frontend/package.json
          git add mockly-frontend/package-lock.json
          git commit -m "chore: bump version to ${{ needs.version.outputs.version }}"
          git push origin main